#! /usr/bin/env python

####################################################################################################
#
# Babel - A Bibliography Manager
# Copyright (C) 2014 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

""" Babel GUI application """

####################################################################################################
#
# Logging
#

import Babel.Logging.Logging as Logging

logger = Logging.setup_logging('babel')

####################################################################################################

import argparse
import sys

from Babel.Config import Config
from Babel.Config.ConfigFile import ConfigFile
from Babel.FileSystem.File import Directory
from Babel.Tools.Path import to_absolute_path
from Babel.Tools.ProgramOptions import PathAction

####################################################################################################

application = None

####################################################################################################
#
# Options
#

main_parser = argparse.ArgumentParser(
    description='Babel is an Electronic Document Management System',
)

subparsers = main_parser.add_subparsers(
    dest='subparser_name',
    help='sub-command help',
)

################################################################################

main_parser.add_argument(
    '--config-directory',
    action=PathAction,
    default=None,
    help='config directory',
)

main_parser.add_argument(
    '--version',
    action='store_true', default=False,
    help="show version and exit",
)

main_parser.add_argument(
    '--user-script',
    action=PathAction,
    default=None,
    help='user script to execute',
)

main_parser.add_argument(
    '--user-script-args',
    default='',
    help="user script args (don't forget to quote)",
)

################################################################################

init_parser = subparsers.add_parser('init', help='Generate a config file')

init_parser.add_argument(
    '--document-root-path',
    action=PathAction,
    required=True,
    help='directory where are stored the documents',
)

init_parser.set_defaults(func=ConfigFile.create)

################################################################################

index_parser = subparsers.add_parser('index', help='Index')
index_parser.set_defaults(func=lambda args: application.index_all(args))

####################################################################################################

query_parser = subparsers.add_parser('query', help='Query document database')

query_parser.add_argument(
    'query', metavar='Query',
    help='Query',
)

query_parser.set_defaults(func=lambda args: application.query(args))

####################################################################################################

args = main_parser.parse_args()

# Show version and exit
if args.version:
    import Babel.Version as Version
    print('Babel version is {}'.format(Version.babel))
    sys.exit(0)

# Overwritte config directory
if args.config_directory:
    path = Directory(to_absolute_path(args.config_directory))
    Config.Path.CONFIG_DIRECTORY = path
    Config.Path.DATA_DIRECTORY = path
    print(Config.DataBase.document_database())

if args.subparser_name not in ('init',):
    from Babel.Application.BabelApplication import BabelApplication
    application = BabelApplication(args=args)
    application.execute_given_user_script()

# Call command
if 'func' in args:
    args.func(args)
else:
    print('A command is required')
